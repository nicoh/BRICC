grammar Codel
	rule top_entry
	     (port_read / port_write / prop_get / prop_set / call / code)* {
		def content
		      elements.map{ |e| e.content }
		end
	     }
	end

	# Ports
	rule port_read
	     'bcm_port_read' ws? '(' ws?  arg ws? ')' {
		def content
			[:port_read, arg.content]
		end
	     }
 	end

	rule port_write
	     'bcm_port_write' ws? '(' ws? arg1:arg ',' ws? arg2:arg ws? ')' {
		def content
			[:port_write, arg1.content, arg2.content]
		end
	     }
 	end

	# Properties
	rule prop_get
	     'bcm_prop_get' ws? '(' ws?  arg ws? ')' {
		def content
			[:prop_get, arg.content]
		end
	     }
 	end

	rule prop_set
	     'bcm_prop_set' ws? '(' ws? arg1:arg ',' ws? arg2:arg ws? ')' {
		def content
			[:prop_set, arg1.content, arg2.content]
		end
	     }
 	end

	# Operation
	rule call
	     'bcm_call' ws? '(' ws? opname:arg arglist:( ws? ',' ws? argument:arg )* ws? ')' {
		def content
			[:call, opname.content ] + arglist.elements.map {|e| e.argument.content}
		end
	     }
 	end

	rule arg
	     [\"a-zA-Z0-9_-]+ {
		def content
			[:arg, text_value]
		end
	     }
	end

	rule code
	     (!'bcm_' . )+ {
		def content
			[:code, text_value]
		end
	     }
	end

	rule ws
    	     [ \t]+
	end
end
